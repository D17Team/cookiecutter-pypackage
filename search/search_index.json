{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cookiecutter PyPackage \u00b6 Cookiecutter template for Python package, forked from audreyr/cookiecutter-pypackage . For those who don't know what cookiecutter is: cookiecutter is like a scaffold tool, a wizard whick help you create new porject from template. GitHub repo: https://github.com/zillionare/cookiecutter-pypackage/ Documentation: https://zillionare.github.io/cookiecutter-pypackage/ Free software: BSD license Features \u00b6 This template will help you create new Python project that contains the following features: Poetry : Manage version, dependancy, build and release Mkdocs : Writting your docs in markdown style Testing setup with unittest or pytest code coverage report Travis-CI : Test and deploy your product Tox : Test automation and standarized Code formatting/linting occurs at code commit and tox/CI Code formatting by black , isort Code linting by flake8 mkdocstrings Auto API doc generation Command line interface using Python Fire (optional) Documentation: support both git pages and readthedocs Quickstart \u00b6 Install the latest Cookiecutter if you haven't installed it yet (this requires Cookiecutter 1.4.0 or higher):: 1 pip install -U cookiecutter Generate a Python package project:: 1 cookiecutter https://github.com/zillionare/cookiecutter-pypackage.git Then: Create a repo and put it there. Add the repo to your Travis-CI account. Install the dev requirements into a virtualenv. ( poetry install -E doc -E dev -E test ) Run the Travis CLI command travis encrypt --add deploy.password to encrypt your PyPI password in Travis config and activate automated deployment on PyPI when you push a new tag to master branch. Add the repo to your Read the Docs account + turn on the Read the Docs service hook. Release your package by pushing a new tag to master. Get your code on! \ud83d\ude0e Add your package dependencies as you go, locking them into your virtual environment with poetry add . For more details, see the cookiecutter-pypackage tutorial Credits \u00b6 This repo is forked from audreyr/cookiecutter-pypackage , and borrowed some ideas from briggySmalls","title":"introduction"},{"location":"#cookiecutter-pypackage","text":"Cookiecutter template for Python package, forked from audreyr/cookiecutter-pypackage . For those who don't know what cookiecutter is: cookiecutter is like a scaffold tool, a wizard whick help you create new porject from template. GitHub repo: https://github.com/zillionare/cookiecutter-pypackage/ Documentation: https://zillionare.github.io/cookiecutter-pypackage/ Free software: BSD license","title":"Cookiecutter PyPackage"},{"location":"#features","text":"This template will help you create new Python project that contains the following features: Poetry : Manage version, dependancy, build and release Mkdocs : Writting your docs in markdown style Testing setup with unittest or pytest code coverage report Travis-CI : Test and deploy your product Tox : Test automation and standarized Code formatting/linting occurs at code commit and tox/CI Code formatting by black , isort Code linting by flake8 mkdocstrings Auto API doc generation Command line interface using Python Fire (optional) Documentation: support both git pages and readthedocs","title":"Features"},{"location":"#quickstart","text":"Install the latest Cookiecutter if you haven't installed it yet (this requires Cookiecutter 1.4.0 or higher):: 1 pip install -U cookiecutter Generate a Python package project:: 1 cookiecutter https://github.com/zillionare/cookiecutter-pypackage.git Then: Create a repo and put it there. Add the repo to your Travis-CI account. Install the dev requirements into a virtualenv. ( poetry install -E doc -E dev -E test ) Run the Travis CLI command travis encrypt --add deploy.password to encrypt your PyPI password in Travis config and activate automated deployment on PyPI when you push a new tag to master branch. Add the repo to your Read the Docs account + turn on the Read the Docs service hook. Release your package by pushing a new tag to master. Get your code on! \ud83d\ude0e Add your package dependencies as you go, locking them into your virtual environment with poetry add . For more details, see the cookiecutter-pypackage tutorial","title":"Quickstart"},{"location":"#credits","text":"This repo is forked from audreyr/cookiecutter-pypackage , and borrowed some ideas from briggySmalls","title":"Credits"},{"location":"console_script_setup/","text":"Console Script Setup ================= Optionally, your package can include a console script using Click or argparse (Python 3.2+). How It Works \u00b6 If the 'command_line_interface' option is set to 'fire' during setup, cookiecutter will add a file 'cli.py' in the project_slug subdirectory. An entry point is added to pyproject.toml that points to the main function in cli.py. Usage \u00b6 To use the console script in development: 1 pip install -e projectdir 'projectdir' should be the top level project directory with the pyproject.toml file The script will be generated with output for no arguments and --help. --help show help menu and exit More Details \u00b6 You can read more about Python Fire at","title":"console script"},{"location":"console_script_setup/#how-it-works","text":"If the 'command_line_interface' option is set to 'fire' during setup, cookiecutter will add a file 'cli.py' in the project_slug subdirectory. An entry point is added to pyproject.toml that points to the main function in cli.py.","title":"How It Works"},{"location":"console_script_setup/#usage","text":"To use the console script in development: 1 pip install -e projectdir 'projectdir' should be the top level project directory with the pyproject.toml file The script will be generated with output for no arguments and --help. --help show help menu and exit","title":"Usage"},{"location":"console_script_setup/#more-details","text":"You can read more about Python Fire at","title":"More Details"},{"location":"prompts/","text":"Prompts \u00b6 When you create a package, you are prompted to enter these values. Templated Values \u00b6 The following appear in various parts of your generated project. full_name Your full name. email Your email address. github_username Your GitHub username. project_name The name of your new Python package project. This is used in documentation, so spaces and any characters are fine here. project_slug The namespace of your Python package. This should be Python import-friendly. Typically, it is the slugified version of project_name. project_short_description A 1-sentence description of what your Python package does. release_date The date of the first release. pypi_username Your Python Package Index account username. year The year of the initial package copyright in the license file. version The starting version number of the package. install_precommit_hooks If you choose yes, then cookiecutter will install pre-commit hooks for you. docstrings_style one of google, numpy, rst . It's required by flake8-docstrings. Options \u00b6 The following package configuration options set up different features for your project. command_line_interface Whether to create a console script using Python Fire. Console script entry point will match the project_slug. Options: ['fire', \"No command-line interface\"]","title":"Prompts"},{"location":"prompts/#prompts","text":"When you create a package, you are prompted to enter these values.","title":"Prompts"},{"location":"prompts/#templated-values","text":"The following appear in various parts of your generated project. full_name Your full name. email Your email address. github_username Your GitHub username. project_name The name of your new Python package project. This is used in documentation, so spaces and any characters are fine here. project_slug The namespace of your Python package. This should be Python import-friendly. Typically, it is the slugified version of project_name. project_short_description A 1-sentence description of what your Python package does. release_date The date of the first release. pypi_username Your Python Package Index account username. year The year of the initial package copyright in the license file. version The starting version number of the package. install_precommit_hooks If you choose yes, then cookiecutter will install pre-commit hooks for you. docstrings_style one of google, numpy, rst . It's required by flake8-docstrings.","title":"Templated Values"},{"location":"prompts/#options","text":"The following package configuration options set up different features for your project. command_line_interface Whether to create a console script using Python Fire. Console script entry point will match the project_slug. Options: ['fire', \"No command-line interface\"]","title":"Options"},{"location":"pypi_release_checklist/","text":"PyPI Release Checklist \u00b6 For Every Release \u00b6 Update HISTORY.rst Commit the changes: 1 2 git add HISTORY.rst git commit -m \"Changelog for upcoming release 0.1.1.\" Update version number (can also be patch or major) 1 bump2version minor Run the tests: 1 tox Push the commit: 1 git push Push the tags, creating the new release on both GitHub and PyPI: 1 git push --tags Check the PyPI listing page to make sure that the README, release notes, and roadmap display properly. If not, try one of these: Copy and paste the RestructuredText into http://rst.ninjs.org/ to find out what broke the formatting. Check your long_description locally: 1 2 3 pip install readme_renderer # Replace PROBLEM.rst with the name of the file you are having trouble with python -m readme_renderer PROBLEM.rst >/dev/null Edit the release on GitHub (e.g. https://github.com/audreyr/cookiecutter/releases ). Paste the release notes into the release's release page, and come up with a title for the release. About This Checklist \u00b6 This checklist is adapted from: https://gist.github.com/audreyr/5990987 https://gist.github.com/audreyr/9f1564ea049c14f682f4 It assumes that you are using all features of Cookiecutter PyPackage.","title":"release checklist"},{"location":"pypi_release_checklist/#pypi-release-checklist","text":"","title":"PyPI Release Checklist"},{"location":"pypi_release_checklist/#for-every-release","text":"Update HISTORY.rst Commit the changes: 1 2 git add HISTORY.rst git commit -m \"Changelog for upcoming release 0.1.1.\" Update version number (can also be patch or major) 1 bump2version minor Run the tests: 1 tox Push the commit: 1 git push Push the tags, creating the new release on both GitHub and PyPI: 1 git push --tags Check the PyPI listing page to make sure that the README, release notes, and roadmap display properly. If not, try one of these: Copy and paste the RestructuredText into http://rst.ninjs.org/ to find out what broke the formatting. Check your long_description locally: 1 2 3 pip install readme_renderer # Replace PROBLEM.rst with the name of the file you are having trouble with python -m readme_renderer PROBLEM.rst >/dev/null Edit the release on GitHub (e.g. https://github.com/audreyr/cookiecutter/releases ). Paste the release notes into the release's release page, and come up with a title for the release.","title":"For Every Release"},{"location":"pypi_release_checklist/#about-this-checklist","text":"This checklist is adapted from: https://gist.github.com/audreyr/5990987 https://gist.github.com/audreyr/9f1564ea049c14f682f4 It assumes that you are using all features of Cookiecutter PyPackage.","title":"About This Checklist"},{"location":"travis_pypi_setup/","text":"PyPI Setup \u00b6 Optionally, your package can automatically be released on PyPI whenever you push a new tag to the master branch. Install the Travis CLI tool \u00b6 This is OS-specific. macOS \u00b6 We recommend the Homebrew travis package: ` brew install travis ` Windows and Linux \u00b6 Follow the official Travis CLI installationinstructions for your operating system: https://github.com/travis-ci/travis.rb#installation How It Works \u00b6 Once you have the travis command - line tool installed, from the root of your project do: 1 travis encrypt --add deploy.password This will encrypt your locally-stored PyPI password and save that to your .travis.yml file. Commit that change to git. Your Release Process \u00b6 If you are using this feature, this is how you would do a patch release: 1 2 bump2version patch git push --tags This will result in: mypackage 0.1.1 showing up in your GitHub tags/releases page mypackage 0.1.1 getting released on PyPI You can also replace patch with minor or major . More Details \u00b6 You can read more about using Travis for PyPI deployment at: https://docs.travis-ci.com/user/deployment/pypi/","title":"setup travis"},{"location":"travis_pypi_setup/#pypi-setup","text":"Optionally, your package can automatically be released on PyPI whenever you push a new tag to the master branch.","title":"PyPI Setup"},{"location":"travis_pypi_setup/#install-the-travis-cli-tool","text":"This is OS-specific.","title":"Install the Travis CLI tool"},{"location":"travis_pypi_setup/#macos","text":"We recommend the Homebrew travis package: ` brew install travis `","title":"macOS"},{"location":"travis_pypi_setup/#windows-and-linux","text":"Follow the official Travis CLI installationinstructions for your operating system: https://github.com/travis-ci/travis.rb#installation","title":"Windows and Linux"},{"location":"travis_pypi_setup/#how-it-works","text":"Once you have the travis command - line tool installed, from the root of your project do: 1 travis encrypt --add deploy.password This will encrypt your locally-stored PyPI password and save that to your .travis.yml file. Commit that change to git.","title":"How It Works"},{"location":"travis_pypi_setup/#your-release-process","text":"If you are using this feature, this is how you would do a patch release: 1 2 bump2version patch git push --tags This will result in: mypackage 0.1.1 showing up in your GitHub tags/releases page mypackage 0.1.1 getting released on PyPI You can also replace patch with minor or major .","title":"Your Release Process"},{"location":"travis_pypi_setup/#more-details","text":"You can read more about using Travis for PyPI deployment at: https://docs.travis-ci.com/user/deployment/pypi/","title":"More Details"},{"location":"troubleshooting/","text":"Troubleshooting \u00b6 Note Can you help improve this file? [Edit this file][] and submit a pull request with your improvements! Windows Issues \u00b6 Some people have reported issues using git bash; try using the Command Terminal instead. Virtual environments can sometimes be tricky on Windows. If you have Python 3.6 or above installed (recommended), this should get you a virtualenv named myenv created inside the current folder: 1 > c : \\ Python35 \\ python -m venv myenv Or: 1 > c : \\ Python35 \\ python c : \\ Python35 \\ Tools \\ Scripts \\ pyvenv . py myenv Some people have reported that they have to re-activate their virtualenv whenever they change directory, so you should remember the path to the virtualenv in case you need it.","title":"troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"Note Can you help improve this file? [Edit this file][] and submit a pull request with your improvements!","title":"Troubleshooting"},{"location":"troubleshooting/#windows-issues","text":"Some people have reported issues using git bash; try using the Command Terminal instead. Virtual environments can sometimes be tricky on Windows. If you have Python 3.6 or above installed (recommended), this should get you a virtualenv named myenv created inside the current folder: 1 > c : \\ Python35 \\ python -m venv myenv Or: 1 > c : \\ Python35 \\ python c : \\ Python35 \\ Tools \\ Scripts \\ pyvenv . py myenv Some people have reported that they have to re-activate their virtualenv whenever they change directory, so you should remember the path to the virtualenv in case you need it.","title":"Windows Issues"},{"location":"tutorial/","text":"Tutorial \u00b6 Note Did you find any of these instructions confusing? [Edit this file][] and submit a pull request with your improvements! To start with, you will need a GitHub account and an account on PyPI . Create these before you get started on this tutorial. If you are new to Git and GitHub, you should probably spend a few minutes on some of the tutorials at the top of the page at GitHub Help . Step 1: Install Cookiecutter \u00b6 Install cookiecutter: 1 pip install cookiecutter We'll also need poetry so [install that too]( https://python-poetry.org/docs/#installation ): Step 2: Generate Your Package \u00b6 Now it's time to generate your Python package. Use cookiecutter, pointing it at the cookiecutter-pypackage repo: 1 cookiecutter https://github.com/zillionare/cookiecutter-pypackage.git You'll be asked to enter a bunch of values to set the package up. If you don't know what to enter, stick with the defaults. Step 3: Build a virtual environment for your development \u00b6 Now build a virtual python environment for your development, and develop your project always in that environment from now on. You can choose either annaconda or virtualenv. I prefer annaconda (actually miniconda) though. 1 2 conda create -n mypackage python=3.8 conda activate mypackage Step 4: Install Dev Requirements \u00b6 You should still be in the folder containing the pyproject.toml file. Install the new project's local development requirements inside a virtual environment using pipenv: 1 2 3 pip install poetry poetry install -E doc -E dev -E test tox We start with install poetry, since the whole project is managed by poetry. Then we installed extra dependency need by developer, such as documentation build tools, lint, formatting and test tools etc. We did a smoke test at last by running tox . This will give you a test report and lint report. You should see no errors except some lint warnings. Tips Extra dependencies are grouped into three groups, doc, dev and test for better granularity. When you ship the package, dependencies in group doc, dev and test will not be shipped. As the developer, you will need install all the dependencies. Tips if you found erros like the following during tox run: 1 ERROR: InterpreterNotFound: python3.9 don't be panic, this is just because python3.x is not found on your machine. If you decide to support that version of Python in your package, please install it on your machine. Otherwise, remove it from tox.ini and pyproject.toml (search python3.x then remove it)) Step 5: Create a GitHub Repo \u00b6 Go to your GitHub account and create a new repo named mypackage , where mypackage matches the [project_slug] from your answers to running cookiecutter. You will find one folder named after the [project_slug] . Move into this folder, and then setup git to use your GitHub repo and upload the code: 1 2 3 4 5 6 7 8 9 10 11 12 cd mypackage # !!! uncomment the following line, if you didn't choose install pre-commit hooks at # last step. If you chose 'yes', then cookiecutter have already done that for you, since # pre-commit install need repo exist. # git init git add . git commit -m \"Initial skeleton.\" git branch -M main git remote add origin git@github.com:myusername/mypackage.git git push -u origin main Where myusername and mypackage are adjusted for your username and package name. You'll need a ssh key to push the repo. You can Generate a key or Add an existing one. Tips if you have asked to install pre-commit hooks at last step, then you should find pre-commit is running when you run git commit , and some files may be changed by hooks. If so, please add these files and commit again Step 6: Publish your package...to testpypi \u00b6 You can try to build and publish your package to test pypi, if it works well, so be true with real pypi. config testpypi repo by: 1 poetry config repositories.testpypi https://test.pypi.org/legacy/ in case you haven't register testpyi account, please visit testpypi and register account, and create an upload token under account settings pages run the following command to publish your package to testpypi: 1 poetry publish --build -r testpypi your will be prompted with account and password, use __token__ as username, and your token as password. Step 7. Set Up Github Actions \u00b6 Once you've pushed your files github repo, github actions will be all set, except for one thing: you need configure secrets for deployment. Here is the procedures: Go to your repo's setting page, find Environments menu at the left sidebar, then click New environment button, create a new environment (I'd prefer CI as its name): Then add secrets into this environment. Secrets should include: TEST_PYPI_API_TOKEN PYPI_API_TOKEN, which you should apply on at PYPI Step 8. Set Up codecov integration \u00b6 This template already baked codecov in. You don't need to set token for codecov, however, you should grant access to your repo for codecov. This can be done at either side, github or codecov. You can logon to codecov , sign in with your github account, then add new repository to codecov. Step 9. Set up readthedocs integration \u00b6 The template has baked readthedocs in, all you need is just goto [readthedos]","title":"tutorial"},{"location":"tutorial/#tutorial","text":"Note Did you find any of these instructions confusing? [Edit this file][] and submit a pull request with your improvements! To start with, you will need a GitHub account and an account on PyPI . Create these before you get started on this tutorial. If you are new to Git and GitHub, you should probably spend a few minutes on some of the tutorials at the top of the page at GitHub Help .","title":"Tutorial"},{"location":"tutorial/#step-1-install-cookiecutter","text":"Install cookiecutter: 1 pip install cookiecutter We'll also need poetry so [install that too]( https://python-poetry.org/docs/#installation ):","title":"Step 1: Install Cookiecutter"},{"location":"tutorial/#step-2-generate-your-package","text":"Now it's time to generate your Python package. Use cookiecutter, pointing it at the cookiecutter-pypackage repo: 1 cookiecutter https://github.com/zillionare/cookiecutter-pypackage.git You'll be asked to enter a bunch of values to set the package up. If you don't know what to enter, stick with the defaults.","title":"Step 2: Generate Your Package"},{"location":"tutorial/#step-3-build-a-virtual-environment-for-your-development","text":"Now build a virtual python environment for your development, and develop your project always in that environment from now on. You can choose either annaconda or virtualenv. I prefer annaconda (actually miniconda) though. 1 2 conda create -n mypackage python=3.8 conda activate mypackage","title":"Step 3: Build a virtual environment for your development"},{"location":"tutorial/#step-4-install-dev-requirements","text":"You should still be in the folder containing the pyproject.toml file. Install the new project's local development requirements inside a virtual environment using pipenv: 1 2 3 pip install poetry poetry install -E doc -E dev -E test tox We start with install poetry, since the whole project is managed by poetry. Then we installed extra dependency need by developer, such as documentation build tools, lint, formatting and test tools etc. We did a smoke test at last by running tox . This will give you a test report and lint report. You should see no errors except some lint warnings. Tips Extra dependencies are grouped into three groups, doc, dev and test for better granularity. When you ship the package, dependencies in group doc, dev and test will not be shipped. As the developer, you will need install all the dependencies. Tips if you found erros like the following during tox run: 1 ERROR: InterpreterNotFound: python3.9 don't be panic, this is just because python3.x is not found on your machine. If you decide to support that version of Python in your package, please install it on your machine. Otherwise, remove it from tox.ini and pyproject.toml (search python3.x then remove it))","title":"Step 4: Install Dev Requirements"},{"location":"tutorial/#step-5-create-a-github-repo","text":"Go to your GitHub account and create a new repo named mypackage , where mypackage matches the [project_slug] from your answers to running cookiecutter. You will find one folder named after the [project_slug] . Move into this folder, and then setup git to use your GitHub repo and upload the code: 1 2 3 4 5 6 7 8 9 10 11 12 cd mypackage # !!! uncomment the following line, if you didn't choose install pre-commit hooks at # last step. If you chose 'yes', then cookiecutter have already done that for you, since # pre-commit install need repo exist. # git init git add . git commit -m \"Initial skeleton.\" git branch -M main git remote add origin git@github.com:myusername/mypackage.git git push -u origin main Where myusername and mypackage are adjusted for your username and package name. You'll need a ssh key to push the repo. You can Generate a key or Add an existing one. Tips if you have asked to install pre-commit hooks at last step, then you should find pre-commit is running when you run git commit , and some files may be changed by hooks. If so, please add these files and commit again","title":"Step 5: Create a GitHub Repo"},{"location":"tutorial/#step-6-publish-your-packageto-testpypi","text":"You can try to build and publish your package to test pypi, if it works well, so be true with real pypi. config testpypi repo by: 1 poetry config repositories.testpypi https://test.pypi.org/legacy/ in case you haven't register testpyi account, please visit testpypi and register account, and create an upload token under account settings pages run the following command to publish your package to testpypi: 1 poetry publish --build -r testpypi your will be prompted with account and password, use __token__ as username, and your token as password.","title":"Step 6: Publish your package...to testpypi"},{"location":"tutorial/#step-7-set-up-github-actions","text":"Once you've pushed your files github repo, github actions will be all set, except for one thing: you need configure secrets for deployment. Here is the procedures: Go to your repo's setting page, find Environments menu at the left sidebar, then click New environment button, create a new environment (I'd prefer CI as its name): Then add secrets into this environment. Secrets should include: TEST_PYPI_API_TOKEN PYPI_API_TOKEN, which you should apply on at PYPI","title":"Step 7. Set Up Github Actions"},{"location":"tutorial/#step-8-set-up-codecov-integration","text":"This template already baked codecov in. You don't need to set token for codecov, however, you should grant access to your repo for codecov. This can be done at either side, github or codecov. You can logon to codecov , sign in with your github account, then add new repository to codecov.","title":"Step 8. Set Up codecov integration"},{"location":"tutorial/#step-9-set-up-readthedocs-integration","text":"The template has baked readthedocs in, all you need is just goto [readthedos]","title":"Step 9. Set up readthedocs integration"}]}