{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cookiecutter PyPackage \u00b6 Cookiecutter template for Python package, forked from audreyr/cookiecutter-pypackage . For those who don't know what cookiecutter is: cookiecutter is like a scaffold tool, a wizard whick help you create new porject from template. GitHub repo Documentation Free software: BSD license Features \u00b6 This template will create new Python project with the following features: Poetry : Manage version, dependancy, build and release Mkdocs : Writting your docs in markdown style Testing with unittest or Pytest Code coverage report and upload to Codecov Tox : Test your code against defined Python version matrix, lint and build artifact check. Format with Black and Isort Lint code with Flake8 and Flake8-docstrings Formatting/linting anytime when commit/run local tox/CI Mkdocstrings : Auto API doc generation Command line interface using Python Fire (optional) CI by github actions , auto publish from release branch when tests passed Host your documentation from Git Pages with zero-config Quickstart \u00b6 Install the latest Cookiecutter if you haven't installed it yet (this requires Cookiecutter 1.4.0 or higher) 1 pip install -U cookiecutter Generate a Python package project: 1 cookiecutter https://github.com/zillionare/cookiecutter-pypackage.git Then follow Tutorial to finish other configurations. Credits \u00b6 This repo is forked from audreyr/cookiecutter-pypackage , and borrowed some ideas from briggySmalls","title":"introduction"},{"location":"#cookiecutter-pypackage","text":"Cookiecutter template for Python package, forked from audreyr/cookiecutter-pypackage . For those who don't know what cookiecutter is: cookiecutter is like a scaffold tool, a wizard whick help you create new porject from template. GitHub repo Documentation Free software: BSD license","title":"Cookiecutter PyPackage"},{"location":"#features","text":"This template will create new Python project with the following features: Poetry : Manage version, dependancy, build and release Mkdocs : Writting your docs in markdown style Testing with unittest or Pytest Code coverage report and upload to Codecov Tox : Test your code against defined Python version matrix, lint and build artifact check. Format with Black and Isort Lint code with Flake8 and Flake8-docstrings Formatting/linting anytime when commit/run local tox/CI Mkdocstrings : Auto API doc generation Command line interface using Python Fire (optional) CI by github actions , auto publish from release branch when tests passed Host your documentation from Git Pages with zero-config","title":"Features"},{"location":"#quickstart","text":"Install the latest Cookiecutter if you haven't installed it yet (this requires Cookiecutter 1.4.0 or higher) 1 pip install -U cookiecutter Generate a Python package project: 1 cookiecutter https://github.com/zillionare/cookiecutter-pypackage.git Then follow Tutorial to finish other configurations.","title":"Quickstart"},{"location":"#credits","text":"This repo is forked from audreyr/cookiecutter-pypackage , and borrowed some ideas from briggySmalls","title":"Credits"},{"location":"console_script_setup/","text":"Console Script Setup \u00b6 Optionally, your package can include a console script using Fire How It Works \u00b6 If the command_line_interface option is set to fire during setup, cookiecutter will add a file cli.py in the project_slug subdirectory. An entry point is added to pyproject.toml that points to the main function in cli.py. Usage \u00b6 To use the console script in development: 1 poetry install projectdir should be the top level project directory with the pyproject.toml file Then execute: 1 $your_package_name help it will show your package name, project short description and exit. More Details \u00b6 You can read more about Python Fire at Fire","title":"console script"},{"location":"console_script_setup/#console-script-setup","text":"Optionally, your package can include a console script using Fire","title":"Console Script Setup"},{"location":"console_script_setup/#how-it-works","text":"If the command_line_interface option is set to fire during setup, cookiecutter will add a file cli.py in the project_slug subdirectory. An entry point is added to pyproject.toml that points to the main function in cli.py.","title":"How It Works"},{"location":"console_script_setup/#usage","text":"To use the console script in development: 1 poetry install projectdir should be the top level project directory with the pyproject.toml file Then execute: 1 $your_package_name help it will show your package name, project short description and exit.","title":"Usage"},{"location":"console_script_setup/#more-details","text":"You can read more about Python Fire at Fire","title":"More Details"},{"location":"faq/","text":"Question Why not travis CI? \u00b6 Travis CI is a great service, however, github actions is super convenient and needs zero configuration. Less configuration, less error prone. Question Why not read the docs? \u00b6 Same reason as above. Git pages is convenient than read the docs, it requires no further configuration, except access token. As to read the docs, you need to write v2 config file, plus several settings on web pages. Question Why mkdocs over sphinx? \u00b6 reStructured Text and Sphinx is way to tedious, though powerful. With extension, you'll find almost all features are available in mkdocs, in a neat and productive way. Poetry and Markdown, are the two key factors driven me develop this template. Question What are the configuration items? \u00b6 Here is a list: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 ## Templated Values The following appear in various parts of your generated project. full_name Your full name. email Your email address. github_username Your GitHub username. project_name The name of your new Python package project. This is used in documentation, so spaces and any characters are fine here. project_slug The namespace of your Python package. This should be Python import-friendly. Typically, it is the slugified version of project_name. project_short_description A 1-sentence description of what your Python package does. release_date The date of the first release. pypi_username Your Python Package Index account username. year The year of the initial package copyright in the license file. version The starting version number of the package. install_precommit_hooks If you choose yes, then cookiecutter will install pre-commit hooks for you. docstrings_style one of `google, numpy, rst`. It's required by flake8-docstrings. ## Options The following package configuration options set up different features for your project. command_line_interface Whether to create a console script using Python Fire. Console script entry point will match the project_slug. Options: \\['fire', \"No command-line interface\"\\]","title":"FAQ"},{"location":"faq/#why-not-travis-ci","text":"Travis CI is a great service, however, github actions is super convenient and needs zero configuration. Less configuration, less error prone. Question","title":"Why not travis CI?"},{"location":"faq/#why-not-read-the-docs","text":"Same reason as above. Git pages is convenient than read the docs, it requires no further configuration, except access token. As to read the docs, you need to write v2 config file, plus several settings on web pages. Question","title":"Why not read the docs?"},{"location":"faq/#why-mkdocs-over-sphinx","text":"reStructured Text and Sphinx is way to tedious, though powerful. With extension, you'll find almost all features are available in mkdocs, in a neat and productive way. Poetry and Markdown, are the two key factors driven me develop this template. Question","title":"Why mkdocs over sphinx?"},{"location":"faq/#what-are-the-configuration-items","text":"Here is a list: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 ## Templated Values The following appear in various parts of your generated project. full_name Your full name. email Your email address. github_username Your GitHub username. project_name The name of your new Python package project. This is used in documentation, so spaces and any characters are fine here. project_slug The namespace of your Python package. This should be Python import-friendly. Typically, it is the slugified version of project_name. project_short_description A 1-sentence description of what your Python package does. release_date The date of the first release. pypi_username Your Python Package Index account username. year The year of the initial package copyright in the license file. version The starting version number of the package. install_precommit_hooks If you choose yes, then cookiecutter will install pre-commit hooks for you. docstrings_style one of `google, numpy, rst`. It's required by flake8-docstrings. ## Options The following package configuration options set up different features for your project. command_line_interface Whether to create a console script using Python Fire. Console script entry point will match the project_slug. Options: \\['fire', \"No command-line interface\"\\]","title":"What are the configuration items?"},{"location":"pypi_release_checklist/","text":"PyPI Release Checklist \u00b6 For Every Release \u00b6 Update HISTORY.rst Commit the changes: 1 2 git add HISTORY.rst git commit -m \"Changelog for upcoming release 0.1.1.\" Update version number (can also be patch or major) 1 poetry patch Run the tests: 1 tox Push the commit to release branch: 1 git push Push the tags, creating the new release on both GitHub and PyPI: 1 2 git tag %tag_name% git push --tags Check the PyPI listing page to make sure that the README, release notes, and roadmap display properly. If tox test passwed, this should be ok, since we have already run twine check during tox test. Edit the release on GitHub (e.g. https://github.com/audreyr/cookiecutter/releases ). Paste the release notes into the release's release page, and come up with a title for the release. About This Checklist \u00b6 This checklist is adapted from: https://gist.github.com/audreyr/5990987 https://gist.github.com/audreyr/9f1564ea049c14f682f4 It assumes that you are using all features of Cookiecutter PyPackage.","title":"release checklist"},{"location":"pypi_release_checklist/#pypi-release-checklist","text":"","title":"PyPI Release Checklist"},{"location":"pypi_release_checklist/#for-every-release","text":"Update HISTORY.rst Commit the changes: 1 2 git add HISTORY.rst git commit -m \"Changelog for upcoming release 0.1.1.\" Update version number (can also be patch or major) 1 poetry patch Run the tests: 1 tox Push the commit to release branch: 1 git push Push the tags, creating the new release on both GitHub and PyPI: 1 2 git tag %tag_name% git push --tags Check the PyPI listing page to make sure that the README, release notes, and roadmap display properly. If tox test passwed, this should be ok, since we have already run twine check during tox test. Edit the release on GitHub (e.g. https://github.com/audreyr/cookiecutter/releases ). Paste the release notes into the release's release page, and come up with a title for the release.","title":"For Every Release"},{"location":"pypi_release_checklist/#about-this-checklist","text":"This checklist is adapted from: https://gist.github.com/audreyr/5990987 https://gist.github.com/audreyr/9f1564ea049c14f682f4 It assumes that you are using all features of Cookiecutter PyPackage.","title":"About This Checklist"},{"location":"tutorial/","text":"Tutorial \u00b6 Note Did you find this artichle confusing? Edit this file and pull a request! To start with, you will need GitHub , Pypi , TestPyPi and Codecov account. If you don't have one, please follow the links to apply one before you get started on this tutorial. If you are new to Git and GitHub, you should probably spend a few minutes on some of the tutorials at the top of the page at GitHub Help Step 1: Install Cookiecutter \u00b6 Install cookiecutter: 1 pip install cookiecutter We'll also need poetry so [install that too]( https://python-poetry.org/docs/#installation ): Step 2: Generate Your Package \u00b6 Now it's time to generate your Python package. Use cookiecutter, pointing it at the cookiecutter-pypackage repo: 1 cookiecutter https://github.com/zillionare/cookiecutter-pypackage.git You'll be asked to enter a bunch of values to set the package up. If you don't know what to enter, stick with the defaults. Step 3: Build a virtual environment for your development \u00b6 Now build a virtual python environment for your development, and develop your project always in that environment from now on. You can choose either annaconda or virtualenv. I prefer annaconda (actually miniconda) though. 1 2 conda create -n mypackage python=3.8 conda activate mypackage Step 4: Install Dev Requirements \u00b6 You should still be in the folder containing the pyproject.toml file. Install the new project's local development requirements inside a virtual environment using pipenv: 1 2 3 pip install poetry poetry install -E doc -E dev -E test tox We start with install poetry, since the whole project is managed by poetry. Then we installed extra dependency need by developer, such as documentation build tools, lint, formatting and test tools etc. We did a smoke test at last by running tox . This will give you a test report and lint report. You should see no errors except some lint warnings. Tips Extra dependencies are grouped into three groups, doc, dev and test for better granularity. When you ship the package, dependencies in group doc, dev and test will not be shipped. As the developer, you will need install all the dependencies. Tips if you found erros like the following during tox run: 1 ERROR: InterpreterNotFound: python3.9 don't be panic, this is just because python3.x is not found on your machine. If you decide to support that version of Python in your package, please install it on your machine. Otherwise, remove it from tox.ini and pyproject.toml (search python3.x then remove it) Step 5: Create a GitHub Repo \u00b6 Go to your GitHub account and create a new repo named mypackage , where mypackage matches the [project_slug] from your answers to running cookiecutter. You will find one folder named after the [project_slug] . Move into this folder, and then setup git to use your GitHub repo and upload the code: 1 2 3 4 5 6 7 8 9 10 11 12 cd mypackage # !!! uncomment the following line, if you didn't choose install pre-commit hooks at # last step. If you chose 'yes', then cookiecutter have already done that for you, since # pre-commit install need repo exist. # git init git add . git commit -m \"Initial skeleton.\" git branch -M main git remote add origin git@github.com:myusername/mypackage.git git push -u origin main Where myusername and mypackage are adjusted for your username and package name. You'll need a ssh key to push the repo. You can Generate a key or Add an existing one. Tips if you have asked to install pre-commit hooks at last step, then you should find pre-commit is running when you run git commit , and some files may be changed by hooks. If so, please add these files and commit again Step 6: Publish your package...to testpypi \u00b6 You can try to build and publish your package to test pypi, if it works well, so be true with real pypi. config testpypi repo by: 1 poetry config repositories.testpypi https://test.pypi.org/legacy/ in case you haven't register testpyi account, please visit testpypi and register account, and create an upload token under account settings pages run the following command to publish your package to testpypi: 1 poetry publish --build -r testpypi your will be prompted with account and password, use __token__ as username, and your token as password. Tips This step is for testing package build purpose. The actual publish procedures will be automatically done once you push your code to github with the following conditions met: the branch is release the commit is tagged build/testing executed by github CI passed Step 7. Set Up Github Actions \u00b6 Once you've pushed your files github repo, github actions will be all set, except for one thing: you need configure secrets for deployment. Here is the procedures: Go to your repo's setting page, find Environments menu at the left sidebar, then click New environment button, create a new environment (I'd prefer CI as its name): Then add secrets into this environment. Secrets should include: TEST_PYPI_API_TOKEN, see How to apply testpypi token PYPI_API_TOKEN, see How to apply pypi token PERSONAL_TOKEN, see How to apply personal token Tips for security consideration, please apply deploy API token on PyPI and TestPyPI , instead use your username/password. Step 8. Set Up codecov integration \u00b6 This template already baked codecov in. All you need to do is to grant access to your repo for codecov. This can be done at either side, github or codecov. You can logon to codecov , sign in with your github account, then add new repository to codecov. Step 9. Check documentation \u00b6 Documentation will be published and available at https://{your_github_account}.github.io/{your_repo} once: you pushed code to release branch build/testing from github CI passed If you'd like to see what it's look like, you could run the followng command: 1 mkdocs gh-deploy then check your documentation at https://{your_github_account}.github.io/{your_repo}","title":"tutorial"},{"location":"tutorial/#tutorial","text":"Note Did you find this artichle confusing? Edit this file and pull a request! To start with, you will need GitHub , Pypi , TestPyPi and Codecov account. If you don't have one, please follow the links to apply one before you get started on this tutorial. If you are new to Git and GitHub, you should probably spend a few minutes on some of the tutorials at the top of the page at GitHub Help","title":"Tutorial"},{"location":"tutorial/#step-1-install-cookiecutter","text":"Install cookiecutter: 1 pip install cookiecutter We'll also need poetry so [install that too]( https://python-poetry.org/docs/#installation ):","title":"Step 1: Install Cookiecutter"},{"location":"tutorial/#step-2-generate-your-package","text":"Now it's time to generate your Python package. Use cookiecutter, pointing it at the cookiecutter-pypackage repo: 1 cookiecutter https://github.com/zillionare/cookiecutter-pypackage.git You'll be asked to enter a bunch of values to set the package up. If you don't know what to enter, stick with the defaults.","title":"Step 2: Generate Your Package"},{"location":"tutorial/#step-3-build-a-virtual-environment-for-your-development","text":"Now build a virtual python environment for your development, and develop your project always in that environment from now on. You can choose either annaconda or virtualenv. I prefer annaconda (actually miniconda) though. 1 2 conda create -n mypackage python=3.8 conda activate mypackage","title":"Step 3: Build a virtual environment for your development"},{"location":"tutorial/#step-4-install-dev-requirements","text":"You should still be in the folder containing the pyproject.toml file. Install the new project's local development requirements inside a virtual environment using pipenv: 1 2 3 pip install poetry poetry install -E doc -E dev -E test tox We start with install poetry, since the whole project is managed by poetry. Then we installed extra dependency need by developer, such as documentation build tools, lint, formatting and test tools etc. We did a smoke test at last by running tox . This will give you a test report and lint report. You should see no errors except some lint warnings. Tips Extra dependencies are grouped into three groups, doc, dev and test for better granularity. When you ship the package, dependencies in group doc, dev and test will not be shipped. As the developer, you will need install all the dependencies. Tips if you found erros like the following during tox run: 1 ERROR: InterpreterNotFound: python3.9 don't be panic, this is just because python3.x is not found on your machine. If you decide to support that version of Python in your package, please install it on your machine. Otherwise, remove it from tox.ini and pyproject.toml (search python3.x then remove it)","title":"Step 4: Install Dev Requirements"},{"location":"tutorial/#step-5-create-a-github-repo","text":"Go to your GitHub account and create a new repo named mypackage , where mypackage matches the [project_slug] from your answers to running cookiecutter. You will find one folder named after the [project_slug] . Move into this folder, and then setup git to use your GitHub repo and upload the code: 1 2 3 4 5 6 7 8 9 10 11 12 cd mypackage # !!! uncomment the following line, if you didn't choose install pre-commit hooks at # last step. If you chose 'yes', then cookiecutter have already done that for you, since # pre-commit install need repo exist. # git init git add . git commit -m \"Initial skeleton.\" git branch -M main git remote add origin git@github.com:myusername/mypackage.git git push -u origin main Where myusername and mypackage are adjusted for your username and package name. You'll need a ssh key to push the repo. You can Generate a key or Add an existing one. Tips if you have asked to install pre-commit hooks at last step, then you should find pre-commit is running when you run git commit , and some files may be changed by hooks. If so, please add these files and commit again","title":"Step 5: Create a GitHub Repo"},{"location":"tutorial/#step-6-publish-your-packageto-testpypi","text":"You can try to build and publish your package to test pypi, if it works well, so be true with real pypi. config testpypi repo by: 1 poetry config repositories.testpypi https://test.pypi.org/legacy/ in case you haven't register testpyi account, please visit testpypi and register account, and create an upload token under account settings pages run the following command to publish your package to testpypi: 1 poetry publish --build -r testpypi your will be prompted with account and password, use __token__ as username, and your token as password. Tips This step is for testing package build purpose. The actual publish procedures will be automatically done once you push your code to github with the following conditions met: the branch is release the commit is tagged build/testing executed by github CI passed","title":"Step 6: Publish your package...to testpypi"},{"location":"tutorial/#step-7-set-up-github-actions","text":"Once you've pushed your files github repo, github actions will be all set, except for one thing: you need configure secrets for deployment. Here is the procedures: Go to your repo's setting page, find Environments menu at the left sidebar, then click New environment button, create a new environment (I'd prefer CI as its name): Then add secrets into this environment. Secrets should include: TEST_PYPI_API_TOKEN, see How to apply testpypi token PYPI_API_TOKEN, see How to apply pypi token PERSONAL_TOKEN, see How to apply personal token Tips for security consideration, please apply deploy API token on PyPI and TestPyPI , instead use your username/password.","title":"Step 7. Set Up Github Actions"},{"location":"tutorial/#step-8-set-up-codecov-integration","text":"This template already baked codecov in. All you need to do is to grant access to your repo for codecov. This can be done at either side, github or codecov. You can logon to codecov , sign in with your github account, then add new repository to codecov.","title":"Step 8. Set Up codecov integration"},{"location":"tutorial/#step-9-check-documentation","text":"Documentation will be published and available at https://{your_github_account}.github.io/{your_repo} once: you pushed code to release branch build/testing from github CI passed If you'd like to see what it's look like, you could run the followng command: 1 mkdocs gh-deploy then check your documentation at https://{your_github_account}.github.io/{your_repo}","title":"Step 9. Check documentation"}]}