# This publish the project to our  custom package registry

name: Publish package to the custom pypi server

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: ['main', 'master']
    tags:
      - 'v*'
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  release:
    name: Publish to package
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        python-versions: [3.7.5]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-versions }}

      - name: generate change log
        uses: heinrichreimer/github-changelog-generator-action@v2.1.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issues: true
          issuesWoLabels: true
          pullRequests: true
          prWoLabels: true
          unreleased: true
          addSections: '{"documentation":{"prefix":"**Documentation:**","labels":["documentation"]}}'
          sinceTag: v0.1.1
          output: CHANGELOG.md

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox-gh-actions poetry pytest
      # - name: test with pytest
      #  run:
      #   pytest
      - name: Build wheels and source tarball
        run: |
          poetry version $(poetry version --short)-dev.$GITHUB_RUN_NUMBER
          poetry version --short
          poetry build

      - name: create github release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: startsWith(github.ref, 'refs/tags/')


      - name: show temporary files
        run: >-
          ls -l

      - name: publish the application to the server # this publish the application to the pypi server
        run: | #need to make sure the application will delete old packages
          poetry print {% raw %}{{cookiecutter.project_slug}}{% endraw %}
          poetry config repositories.{{cookiecutter.project_slug}} ${{secrets.PYPI_HOST}}
          poetry config http-basic.{{cookiecutter.project_slug}} ${{secrets.PYPI_USERNAME}} ${{secrets.PYPI_PASSWORD}}
          poetry publish -r {{cookiecutter.project_slug}} -v
